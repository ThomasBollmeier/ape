(*
Grammar of APE

APE is a PHP implementation of the Monkey programming language
invented by Thorsten Ball (see https://interpreterbook.com/ for details)

Version: 0.1
Author: Thomas Bollmeier <developer@thomas-bollmeier.de>
*)

-- Lexical elements

comment '--' '\n';

literal '"' '\\';

symbol EQ '=';
symbol SEMICOLON ';';
symbol PLUS '+';
symbol MINUS '-';
symbol ASTERISK '*';
symbol SLASH '/';
symbol LPAR '(';
symbol RPAR ')';
symbol LBRACKET '[';
symbol RBRACKET ']';
symbol LBRACE '{';
symbol RBRACE '}';
symbol COMMA ',';

token ID /[a-zA-Z_][a-zA-Z0-9_]*/;
token INT /[1-9][0-9]*/;

@root
ape -> stmt+;

stmt -> let_stmt
    | return_stmt
    | expr_stmt => child;

let_stmt -> 'let' name#ID EQ value#expr SEMICOLON
=> {
    :name "let_stmt"
    :children [
        {:name "name" :text #name.text}
        {:name "value" :children [#value]}
    ]
};

return_stmt -> 'return' value#expr SEMICOLON
=> {
    :name "return_stmt"
    :children [{:name "value" :children [#value]}]
};

expr_stmt -> ex#expr SEMICOLON
=> {
    :name "expr_stmt"
    :children [#ex]
};

expr -> prod ((PLUS|MINUS) prod)*;

prod -> factor ((ASTERISK|SLASH) factor)*;

factor -> base#atom_expr (LBRACKET idx#expr RBRACKET)* | base#func_expr;

atom_expr -> INT | ID | array_literal | group => child;

group -> LPAR ex#expr RPAR => #ex;

func_expr -> 'fn' LPAR (p#expr (COMMA p#expr)*)? RPAR
    LBRACE
    st#stmt*
    RBRACE
=> {
    :name "func_expr"
    :children [
        {
            :name "params"
            :children #p
        }
        {
            :name "body"
            :children #st
        }
    ]
};

array_literal -> LBRACKET (el#expr (COMMA el#expr)*)? RBRACKET
=> {
    :name "array"
    :children #el
};